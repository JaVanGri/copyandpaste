def merge_overlapping_segments(segments):
    """
    Nimmt eine Liste von Segment-Dicts mit 'start_tok', 'end_tok', 'text', 'label' und
    gibt eine neue Liste zurück, in der überlappende Bereiche zusammengeführt sind.
    """
    if not segments:
        return []

    # 1) nach Start-Token sortieren
    segments_sorted = sorted(segments, key=lambda s: s['start_tok'])
    
    # 2) Initialisierung mit erstem Segment
    current = segments_sorted[0].copy()
    labels = { current['label'] }
    
    merged = []
    
    # 3) Iteration über die restlichen Segmente
    for seg in segments_sorted[1:]:
        if seg['start_tok'] <= current['end_tok']:
            # Überlappt: Token-Bereich erweitern
            current['end_tok'] = max(current['end_tok'], seg['end_tok'])
            labels.add(seg['label'])
            # Als 'text' wählen wir z.B. den längsten Textabschnitt
            if len(seg['text']) > len(current['text']):
                current['text'] = seg['text']
        else:
            # Kein Overlap: aktuelles zusammengebautes Segment abschließen
            current['labels'] = list(labels)
            merged.append(current)
            # Neues Basis-Segment starten
            current = seg.copy()
            labels = { seg['label'] }
    
    # Letztes Segment nicht vergessen
    current['labels'] = list(labels)
    merged.append(current)
    
    return merged
